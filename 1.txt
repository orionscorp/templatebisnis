index.js:
  import Head from 'next/head';
  import { useState, useEffect } from 'react';
  import axios from 'axios';
  import 'bootstrap/dist/css/bootstrap.min.css';

  const HomePage = () => {
    const [paymentMethod, setPaymentMethod] = useState('bank_transfer');
    const [formData, setFormData] = useState({
      name: '',
      phone: '',
      email: '',
      bonus: false,
    });

    const basePrice = 137000;
    const bonusPrice = 57000;
    const totalPrice = basePrice + (formData.bonus ? bonusPrice : 0);

    const handleInputChange = (e) => {
      const { name, value, type, checked } = e.target;
      const finalValue = type === 'checkbox' ? checked : value;
      setFormData({ ...formData, [name]: finalValue });
    };

    const handlePaymentMethodChange = (e) => {
      setPaymentMethod(e.target.value);
    };

    const handleSubmit = async (e) => {
      e.preventDefault();

      try {
        const response = await axios.post('http://localhost:8080/api/payment', { ...formData, paymentMethod, totalPrice });
        if (response.data.status === 'success') {
          window.snap.pay(response.data.token, {
            onSuccess: function(result){
              alert('Thank you for your payment.');
            },
            onPending: function(result){
              alert('Waiting for your payment.');
            },
            onError: function(result){
              alert('Payment failed.');
            },
            onClose: function(){
              alert('You closed the popup without finishing the payment.');
            }
          });
        } else {
          alert('Failed to create transaction.');
        }
      } catch (error) {
        console.error('Payment error:', error);
        alert('Payment error occurred.');
      }
    };

    useEffect(() => {
      const script = document.createElement('script');
      script.src = 'https://app.sandbox.midtrans.com/snap/snap.js';
      script.setAttribute('data-client-key', 'YOUR_MIDTRANS_CLIENT_KEY');
      document.body.appendChild(script);
    }, []);

    const paymentMethods = [
      { value: 'credit_card', label: 'Credit Card', logo: 'https://seeklogo.com/images/V/VISA-logo-A32D589D31-seeklogo.com.png' },
      { value: 'bca_va', label: 'BCA Virtual Account', logo: 'https://seeklogo.com/images/B/bca-bank-logo-1E89320DC2-seeklogo.com.png' },
      { value: 'bni_va', label: 'BNI Virtual Account', logo: 'https://seeklogo.com/images/B/bank-bni-logo-737EE0F32C-seeklogo.com.png' },
      { value: 'echannel', label: 'Mandiri Bill (eChannel)', logo: 'https://seeklogo.com/images/B/bank_mandiri-logo-4F6233ABCC-seeklogo.com.png' },
      { value: 'cstore_indomaret', label: 'Indomaret', logo: 'https://seeklogo.com/images/I/indomaret-logo-EE717AAD0D-seeklogo.com.png' },
      { value: 'cstore_alfamart', label: 'Alfamart', logo: 'https://seeklogo.com/images/A/alfamart-logo-653AD66E16-seeklogo.com.png' },
      { value: 'qris', label: 'QRIS', logo: 'https://seeklogo.com/images/Q/quick-response-code-indonesia-standard-qris-logo-F300D5EB32-seeklogo.com.png' },
    ];

    return (
      <div className="container mt-5">
        <Head>
          <title>Payment Page</title>
        </Head>
        <h1 className="mb-4">Spreadsheet & Powerpoint Flexi DSP - 018</h1>
        <p>Sempurna untuk industri apa pun: Manajer Proyek, Pemilik usaha kecil, Pemimpin tim, Spesialis Penjaminan Mutu, HR Manager, Financial Analyst, Marketing Team, Educator & Trainers, Freelancer.</p>
        <p>Template yang menghemat waktu anda dan mempermudah segalanya.</p>

        <form onSubmit={handleSubmit} className="mt-4">
          <div className="mb-3">
            <label className="form-label">
              Nama Anda:
              <input type="text" className="form-control" name="name" value={formData.name} onChange={handleInputChange} required />
            </label>
          </div>
          <div className="mb-3">
            <label className="form-label">
              No. WhatsApp Anda:
              <input type="tel" className="form-control" name="phone" value={formData.phone} onChange={handleInputChange} required />
            </label>
          </div>
          <div className="mb-3">
            <label className="form-label">
              Email Anda:
              <input type="email" className="form-control" name="email" value={formData.email} onChange={handleInputChange} required />
            </label>
          </div>
          <div className="mb-3 form-check">
            <label className="form-check-label">
              <input type="checkbox" className="form-check-input" name="bonus" checked={formData.bonus} onChange={handleInputChange} />
              Dapatkan Bonus (+Rp 57.000)
            </label>
          </div>

          <h2>Rincian Pesanan:</h2>
          <p>Harga: Rp 137.000</p>
          <p>Bonus: {formData.bonus ? 'Ya (+Rp 57.000)' : 'Tidak'}</p>
          <p>Total: Rp {totalPrice}</p>

          <h2>Metode Pembayaran:</h2>
          {paymentMethods.map(method => (
            <div className="form-check mb-2" key={method.value}>
              <label className="form-check-label d-flex align-items-center">
                <input type="radio" className="form-check-input me-2" name="paymentMethod" value={method.value} checked={paymentMethod === method.value} onChange={handlePaymentMethodChange} />
                <img src={method.logo} alt={method.label} className="me-2" style={{ width: '40px', height: 'auto' }} />
                {method.label}
              </label>
            </div>
          ))}

          <button type="submit" className="btn btn-primary mt-3">Bayar Sekarang</button>
        </form>
      </div>
    );
  };

  export default HomePage;

main.go:
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/joho/godotenv"
	"github.com/midtrans/midtrans-go"
	"github.com/midtrans/midtrans-go/snap"
	gomail "gopkg.in/gomail.v2"
)

type PaymentRequest struct {
	Name          string `json:"name"`
	Phone         string `json:"phone"`
	Email         string `json:"email"`
	Bonus         bool   `json:"bonus"`
	PaymentMethod string `json:"paymentMethod"`
	TotalPrice    int64  `json:"totalPrice"`
}

func loadEnv() {
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file")
	}
}

func sendThankYouEmail(email string, name string) error {
	m := gomail.NewMessage()
	m.SetHeader("From", os.Getenv("EMAIL_USERNAME"))
	m.SetHeader("To", email)
	m.SetHeader("Subject", "Thank you for your payment")
	m.SetBody("text/plain", fmt.Sprintf("Dear %s,\n\nThank you for your payment.\n\nBest regards,\nYour Company", name))

	d := gomail.NewDialer("smtp.gmail.com", 587, os.Getenv("EMAIL_USERNAME"), os.Getenv("EMAIL_PASSWORD"))

	if err := d.DialAndSend(m); err != nil {
		return err
	}
	return nil
}

func paymentHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
		return
	}

	var paymentRequest PaymentRequest
	if err := json.NewDecoder(r.Body).Decode(&paymentRequest); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	serverKey := os.Getenv("MIDTRANS_SERVER_KEY")
	clientKey := os.Getenv("MIDTRANS_CLIENT_KEY")

	midtrans.ServerKey = serverKey
	midtrans.ClientKey = clientKey

	s := snap.Client{}
	s.New(serverKey, midtrans.Sandbox)

	rand.Seed(time.Now().UnixNano())
	orderID := "order-" + strconv.FormatInt(int64(rand.Intn(1000000)), 10)

	req := &snap.Request{
		TransactionDetails: midtrans.TransactionDetails{
			OrderID:  orderID,
			GrossAmt: paymentRequest.TotalPrice,
		},
		CustomerDetail: &midtrans.CustomerDetails{
			FName: paymentRequest.Name,
			Email: paymentRequest.Email,
			Phone: paymentRequest.Phone,
		},
	}

	snapResp, err := s.CreateTransaction(req)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	response := map[string]string{
		"status": "success",
		"token":  snapResp.Token,
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)

	go sendThankYouEmail(paymentRequest.Email, paymentRequest.Name)
}

func main() {
	loadEnv()

	http.HandleFunc("/api/payment", func(w http.ResponseWriter, r *http.Request) {
		// Handle CORS
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

		// Handle preflight requests
		if r.Method == http.MethodOptions {
			return
		}

		paymentHandler(w, r)
	})

	fmt.Println("Server is running on port 8080...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

go .env:
MIDTRANS_SERVER_KEY=SB-Mid-server-XagYhhzNKhT5URnh6XFAQKEZ
MIDTRANS_CLIENT_KEY=SB-Mid-client-Ldpizwz89amL5FBR
EMAIL_USERNAME=guyadipawitra@gmail.com
EMAIL_PASSWORD=jduypzhvbbljneys
DB_CONN_STR=guyadb:guyaggg@tcp(127.0.0.1:3306)/pulang
